import re 


# GSM8K Functions
def extract_answer_gsm8k(completion: str) -> float:
    """
        Extract the final answer generated by the LLM's completion on GSM8K dataset.
        Completion may include the reasoning steps (rationale) and the final answer which is a number (CoT) or only the final answer (standard).
        If the final answer can not be extracted return None.

        Args:
            completion (str): completion generated by LLM.
        
        Returns:
            final_answer (float) or None: final answer which is a float number or None
    """
    try:
        res = re.findall(r'\d+[.,]?\d*', completion)[-1]
        if ',' in res:
            final_answer = float(res.replace(',', ''))
        else:
            final_answer = float(res)
        
        return final_answer
    except Exception as e:
        print(f'Could not extract final answer from this completion: {completion}')
        print(f'Error msg: {e}')
        return None
 
    
# AQUA Functions  
def extract_ai_answer_aqua(completion: str) -> str:
    """
        Extract the final answer generated by the LLM's completion on Aqua dataset.
        Completion may include the reasoning steps and the final answer (YES or NO).

        Args:
            completion (str): completion generated by a LLM.

        Returns:
            preprocess_res (str): a string which is the final answer ('YES' or 'NO') or None
    """

    final_answer_a = completion.lower().split('output:') 
    final_answer_b = completion.lower().split('answer:')

    if len(final_answer_a) > 1:
        res_a = final_answer_a[-1].strip()
        if ')' in res_a or '.' in res_a:
            return res_a[0]
        else:
            if res_a in ['a', 'b', 'c', 'd', 'e']:
                return res_a
    else:
        res_b = final_answer_b[-1].strip()
        if ')' in res_b or '.' in res_b:
            return res_b[0]
        else:
            if res_b in ['a', 'b', 'c', 'd', 'e']:
                return res_b
            else:
                return None
    
def extract_true_answer_aqua(completion: str) -> str:
    """
        Extract the true answer (YES or NO) from a completion in AQUA dataset.

        Args:
            completion (str): completion generated by LLM. It should be boolean.

        Returns:
            (str): a string 'YES' or 'NO' depending on completion value
    """
    return completion.lower().strip()
    
    
# StrategyQA Functions
def extract_ai_answer_strategyqa(completion: str) -> str:
    """
        Extract the final answer generated by the LLM's completion on StrategyQA dataset.
        Completion may include the reasoning steps and the final answer (YES or NO).

        Args:
            completion (str): completion generated by a LLM.

        Returns:
            final_answer (str): a string which is the final answer ('YES' or 'NO').
    """
    
    final_answer = completion.lower().split('answer: ')[-1].strip()
    if final_answer not in ['yes', 'no']:
        return None 
    else:
        return final_answer

def extract_true_answer_strategyqa(completion: bool) -> str:
    """
        Extract the true answer (YES or NO) from a completion in StrategyQA dataset.

        Args:
            completion (str): completion generated by LLM. It should be boolean.

        Returns:
            (str): a string 'YES' or 'NO' depending on completion value
    """
    return 'yes' if completion else 'no'